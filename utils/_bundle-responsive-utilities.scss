@use 'sass:map';
@use 'sass:list';
@use 'sass:meta';
@use 'mediaquery' as *;

@mixin bundle-responsive-utilities($breakpoints) {
  @each $screen, $map in $breakpoints {
    // 1. Build standard mediaqueries
    @if meta.type-of($map) == 'map' {
      $min: map.get($map, 'min');
      $max: map.get($map, 'max');
      $raw: map.get($map, 'raw');
      
      @if $min != null and $max == null {
        @media (min-width: $min) {
          @content($screen, $map); 
        }
      } @else if $max != null and $min == null {
        @media (max-width: $max) {
          @content($screen, $map);
        }
      } @else if $min != null and $max != null {
        @media (min-width: $min) and (max-width: $max) {
          @content($screen, $map);
        }
      } @else if $raw != null {
        @media #{$raw} {
          @content($screen, $map);
        }
      }
    // 2. Build multirange mediaqueries
    } @else if meta.type-of($map) == 'list' {
      $mediaquery: null;
      
      @for $index from 1 through length($map) {
        $inner-map: list.nth($map, $index);
        $min: map.get($inner-map, 'min');
        $max: map.get($inner-map, 'max');
        
        @if $min != null and $max == null {
          @if $mediaquery != null {
            $mediaquery: "#{$mediaquery}, (min-width: #{$min})";
          } @else {
            $mediaquery: "(min-width: #{$min})";
          }
        } @else if $max != null and $min == null {
          @if $mediaquery != null {
            $mediaquery: "#{$mediaquery}, (min-width: #{$max})";
          } @else {
            $mediaquery: "(max-width: #{$max})";
          }
        } @else if $min != null and $max != null {
          @if $mediaquery != null {
            $mediaquery: "#{$mediaquery}, (min-width: #{$min}) and (max-width: #{$max})";
          } @else {
            $mediaquery: "(min-width: #{$min}) and (max-width: #{$max})";
          }
        }
      }
        
      @media #{$mediaquery} {
        @content($screen, $map);
      }
    }
  }
}