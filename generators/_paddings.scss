// Get variant options from paddings module
$paddings-module: map-get($modules, 'paddings');

// Builds rules for paddings module. It takes three arguments suffix, value
// and prefix (optional) to generate padding classes. It's used by paddings()
// mixin.
@mixin paddings-class-rules($suffix, $value, $prefix:null) {
  .#{$prefix}p-#{$suffix}  { padding: $value; }
  .#{$prefix}px-#{$suffix} { padding: { left: $value; right: $value; } } 
  .#{$prefix}py-#{$suffix} { padding: { top: $value; bottom: $value; } }
  .#{$prefix}pt-#{$suffix} { padding-top: $value; };
  .#{$prefix}pr-#{$suffix} { padding-right: $value; };
  .#{$prefix}pb-#{$suffix} { padding-bottom: $value; };
  .#{$prefix}pl-#{$suffix} { padding-left: $value; };
}

// Generates different padding class variants based on config file values. It uses
// 'paddings-class-rules' mixin to build variants based on arguments passed.
// '$breakpoint' parameter is only used wen called from '_responsive.scss' file,
// reponsible for building responsive variants.
@mixin paddings($breakpoint:null)  {
  // Execute only if module is set to true or contains a list
  @if ($paddings-module == true) or (type-of($paddings-module) == 'list') {
    @each $suffix, $value in $paddings {
      // # DEFAULT CLASSES
      // 1. If no breakpoints arguments are passed, generate default classes
      @if $breakpoint == null {
        @include paddings-class-rules($suffix, $value);
      }

      // # RESPONSIVE CLASSES !!!
      // 1. Execute if reponsive module is enabled and '$breakpoint' isn't null
      // 2. Add 'breakpoint\:' for responsive variants
      @if index($paddings-module, 'responsive') and ($breakpoint != null) {
        @include paddings-class-rules($suffix, $value, '#{$breakpoint}\\:');
      }
      
      // # HOVER CLASSES
      // 1. Execute if 'hover' module is enabled and '$breakpoint' is null
      // 2. Add ':hover' suffix and 'hover\:' prefix for hover variants
      @if index($paddings-module, 'hover') and ($breakpoint == null) {
        @include paddings-class-rules('#{$suffix}:hover', $value, 'hover\\:');
      }
    }

    // # EM CLASSES
    // 1. Execute only if module 'ems' is enabled and $breakpoint is null 
    // 2. Add '\*' for prefix for em class variants
    @if index($paddings-module, 'ems') and ($breakpoint == null) {
      @each $suffix, $value in $em-paddings {
        @include paddings-class-rules($suffix, $value, '\\*');
      }
    }
  }
}