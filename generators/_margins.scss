// Get options from margins module
$margins-module: map-get($modules, 'margins');

// Builds rules for margin classes. It takes three arguments suffix, value
// and prefix (optional). It's used by margins() mixin.
@mixin margins-class-rules($suffix, $value, $prefix:null) {
  .#{$prefix}m-#{$suffix} { margin: $value; };
  .#{$prefix}mx-#{$suffix} { margin: { left: $value; right: $value; } };
  .#{$prefix}my-#{$suffix} { margin: { top: $value; bottom: $value; } };
  .#{$prefix}mt-#{$suffix} { margin-top: $value };
  .#{$prefix}mr-#{$suffix} { margin-right: $value };
  .#{$prefix}mb-#{$suffix} { margin-bottom: $value };
  .#{$prefix}ml-#{$suffix} { margin-left: $value };
}

// Function helper: checks if a module is defined in the margins module. Returns
// a number (index position) if found or null if it doesn't
@function is-enabled($module) {
  @return index($margins-module, $module);
}

// Generates different margin class variants based on config file values. It uses
// margins-class-rules mixin to build variants based on arguments passed.
// Variants for this module are: 'responsive', 'hover' and 'negative'
@mixin margins($breakpoint:null) {
  // Execute only if module is set to true or contains a list
  @if ($margins-module == true) or (type-of($margins-module) == 'list') {
    @each $suffix, $value in $margins {
      // # DEFAULT CLASSES
      // If no breakpoints arguments are passed, generate default classes
      @if $breakpoint == null {
        @include margins-class-rules($suffix, $value);
      }

      // # RESPONSIVE CLASSES
      // Execute if reponsive module is enabled and breakpoint prefix argument
      // it's not null
      @if is-enabled('responsive') and ($breakpoint != null) {
        // 1. Join '$breakpoint' with ':'
        $prefix: '#{$breakpoint}\\:';
        // 2. Generate classes with with prefixes for responsive variants
        @include margins-class-rules($suffix, $value, $prefix);
      }
      
      // # HOVER CLASSES
      // Execute if 'hover' module is enabled and if breakpoint argument is null
      @if is-enabled('hover') and ($breakpoint == null) { 
        // 1. Join $suffix with ':hover' pseudo-class
        $suffix: '#{$suffix}:hover';
        // 2. Use 'hover\:' for prefix
        $prefix: 'hover\\:';
        // 3. Generate hover state variant classes
        @include margins-class-rules($suffix, $value, $prefix);
      }

    }

    // # NEGATIVE MARGIN CLASSES
    @each $suffix, $value in $negative-margins {
      // Execute if 'negative' module is enabled and breakpoint is null —meaning
      // we won't generate responsive classes for this negative margins
      @if is-enabled('negative') and ($breakpoint == null) {
        // Generate classes with '-' as prefix
        @include margins-class-rules($suffix, $value, '-');
      }
    }
  }
}