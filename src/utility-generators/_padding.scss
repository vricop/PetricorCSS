@use '../config';
@use '../utils/generate-variants';
@use 'sass:map';

@mixin _padding-classes($prefix, $modifier, $state, $value) {
  .#{$prefix}p#{$modifier}#{$state}  { padding: $value; }
  .#{$prefix}px#{$modifier}#{$state} { padding: { left: $value; right: $value; } } 
  .#{$prefix}py#{$modifier}#{$state} { padding: { top: $value; bottom: $value; } }
  .#{$prefix}pt#{$modifier}#{$state} { padding-top: $value; };
  .#{$prefix}pr#{$modifier}#{$state} { padding-right: $value; };
  .#{$prefix}pb#{$modifier}#{$state} { padding-bottom: $value; };
  .#{$prefix}pl#{$modifier}#{$state} { padding-left: $value; };
}

@mixin padding($screen: null) {
  $args: config.$padding, map.get(config.$variants, 'padding'), $screen;
  
  @include generate-variants.configurable($args...) using ($prefix, $modifier, $state, $value) {
    @include _padding-classes($prefix, $modifier, $state, $value * 1rem);
  };
  
  $args_em: config.$padding-em, map.get(config.$variants, 'padding-em'), $screen;
  
  @include generate-variants.configurable($args_em...) using ($prefix, $modifier, $state, $value) {
    @include _padding-classes($prefix, '#{$modifier}\\[em\\]', $state, $value * 1em);
  };
  
  $args_ch: config.$padding-ch, map.get(config.$variants, 'padding-ch'), $screen;
  
  @include generate-variants.configurable($args_ch...) using ($prefix, $modifier, $state, $value) {
    .#{$prefix}px#{$modifier}\[ch\]#{$state} { padding: { left: $value; right: $value; } } 
  };
}